{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using UnityEngine;\
using Oculus.Interaction;\
using UnityEngine.UI;\
\
public class NeopixelBLEController : MonoBehaviour\
\{\
    public string DeviceName = "ESP32 Neopixel Controller";  // Nombre del dispositivo BLE\
    public string ServiceUUID = "A9E90000-194C-4523-A473-5FDF36AA4D18";  // UUID del servicio BLE\
    public string LedUUID = "A9E90001-194C-4523-A473-5FDF36AA4D18";  // UUID de la caracter\'edstica para controlar el Neopixel\
\
    public PokeInteractable pokeInteractable;  // El bot\'f3n de interacci\'f3n en VR\
    public Text connectionStatus;  // Texto para mostrar el estado de la conexi\'f3n\
    private bool isConnected = false;  // Bandera de conexi\'f3n\
    private string _deviceAddress;  // Direcci\'f3n del dispositivo BLE\
\
    private bool scanning = false;\
\
    void Start()\
    \{\
        UpdateConnectionStatus("Iniciando BLE...");\
\
        // Inicializamos BLE\
        BluetoothLEHardwareInterface.Initialize(true, false, () =>\
        \{\
            UpdateConnectionStatus("BLE inicializado.");\
            SetNeopixelColor(false);  // Rojo al inicio (no conectado)\
        \}, (error) =>\
        \{\
            UpdateConnectionStatus("Error al inicializar BLE: " + error);\
        \});\
\
        // Escuchar el evento del bot\'f3n Poke\
        if (pokeInteractable != null)\
        \{\
            pokeInteractable.WhenPointerEventRaised += OnPokeInteraction;\
        \}\
        else\
        \{\
            UpdateConnectionStatus("Error: PokeInteractable no configurado.");\
        \}\
    \}\
\
    private void OnDestroy()\
    \{\
        if (pokeInteractable != null)\
        \{\
            pokeInteractable.WhenPointerEventRaised -= OnPokeInteraction;\
        \}\
    \}\
\
    // M\'e9todo invocado al presionar el bot\'f3n de Poke\
    private void OnPokeInteraction(PointerEvent evt)\
    \{\
        UpdateConnectionStatus("Poke detectado. Evento: " + evt.Type.ToString());\
\
        if (evt.Type == PointerEventType.Select && !isConnected && !scanning)\
        \{\
            UpdateConnectionStatus("Iniciando escaneo por BLE...");\
            ScanForDevice();\
        \}\
    \}\
\
    // Actualizar el estado de conexi\'f3n en la UI\
    private void UpdateConnectionStatus(string message)\
    \{\
        connectionStatus.text = message;\
    \}\
\
    // Iniciar el escaneo para encontrar el dispositivo BLE\
    void ScanForDevice()\
    \{\
        scanning = true;\
        UpdateConnectionStatus("Escaneando dispositivos BLE...");\
\
        BluetoothLEHardwareInterface.ScanForPeripheralsWithServices(null, (address, name) =>\
        \{\
            // Mostrar en el texto de la UI qu\'e9 dispositivos se encuentran durante el escaneo\
            UpdateConnectionStatus($"Dispositivo detectado: \{name\}");\
\
            if (name.Contains(DeviceName))\
            \{\
                UpdateConnectionStatus("Dispositivo encontrado: " + name);\
                BluetoothLEHardwareInterface.StopScan();\
                _deviceAddress = address;\
                ConnectToDevice();\
            \}\
            else\
            \{\
                UpdateConnectionStatus($"Otro dispositivo encontrado: \{name\}, ignorando...");\
            \}\
        \}, (address, name, rssi, advertisingInfo) =>\
        \{\
            UpdateConnectionStatus($"Dispositivo detectado: \{name\} con RSSI: \{rssi\}");\
        \});\
    \}\
\
    // Conectar al dispositivo BLE encontrado\
    void ConnectToDevice()\
    \{\
        UpdateConnectionStatus("Conectando al dispositivo...");\
\
        BluetoothLEHardwareInterface.ConnectToPeripheral(_deviceAddress, null, null, (address, serviceUUID, characteristicUUID) =>\
        \{\
            // Mostrar los UUIDs recibidos para depuraci\'f3n\
            UpdateConnectionStatus($"UUID del servicio recibido: \{serviceUUID.Trim()\}, UUID de la caracter\'edstica recibida: \{characteristicUUID.Trim()\}");\
\
            // Verificar si los UUID coinciden con los definidos, comparando sin espacios y en min\'fasculas\
            if (serviceUUID.Trim().ToLower() == ServiceUUID.ToLower() && characteristicUUID.Trim().ToLower() == LedUUID.ToLower())\
            \{\
                isConnected = true;\
                UpdateConnectionStatus("Conectado al dispositivo ESP32");\
                SetNeopixelColor(true);  // Cambia a verde cuando est\'e1 conectado\
            \}\
            else\
            \{\
                UpdateConnectionStatus("UUID no coincide, no es el dispositivo esperado.");\
            \}\
        \}, (disconnectedAddress) =>\
        \{\
            isConnected = false;\
            UpdateConnectionStatus("Dispositivo desconectado");\
            SetNeopixelColor(false);  // Rojo si se desconecta\
        \});\
    \}\
\
    // Cambiar el color del Neopixel: verde para conectado, rojo para desconectado\
    void SetNeopixelColor(bool connected)\
    \{\
        byte[] data = connected ? new byte[] \{ 0x01 \} : new byte[] \{ 0x00 \};  // 0x01 es verde, 0x00 es rojo\
        BluetoothLEHardwareInterface.WriteCharacteristic(_deviceAddress, ServiceUUID, LedUUID, data, data.Length, true, (characteristicUUID) =>\
        \{\
            UpdateConnectionStatus("Neopixel color cambiado.");\
        \});\
    \}\
\}\
}