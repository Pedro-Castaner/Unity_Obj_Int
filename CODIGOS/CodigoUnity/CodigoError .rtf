{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using UnityEngine;\
using UnityEngine.UI;\
using System.Collections.Generic;\
using Oculus.Interaction;  // Necesario para trabajar con PokeInteractable\
using UnityEngine.Android;  // Necesario para manejar permisos en Android\
\
public class NeopixelBLEController : MonoBehaviour\
\{\
    public string DeviceName = "ESP32 Neopixel Controller";  // Nombre del dispositivo BLE\
    public string ServiceUUID = "A9E90000-194C-4523-A473-5FDF36AA4D18";  // UUID del servicio BLE\
    public string IMUUUID = "A9E90001-194C-4523-A473-5FDF36AA4D18";  // UUID para los datos de IMU\
    public PokeInteractable pokeInteractable;  // El bot\'f3n de interacci\'f3n en VR (PokeInteractable)\
    public Text connectionStatus;  // Texto para el estado de la conexi\'f3n\
    public Text imuDataText;  // Texto para mostrar los datos de IMU\
    public Text imuDataCanvasText;  // Texto para mostrar los datos de IMU en el Canvas\
\
    private bool isConnected = false;  // Bandera de conexi\'f3n\
    private string _deviceAddress;  // Direcci\'f3n del dispositivo BLE\
    private bool scanning = false;\
\
    void Start()\
    \{\
        RequestPermissions();  // Solicitar permisos al iniciar\
        UpdateConnectionStatus("Iniciando BLE...");\
\
        BluetoothLEHardwareInterface.Initialize(true, false, () =>\
        \{\
            UpdateConnectionStatus("BLE inicializado.");\
        \}, (error) =>\
        \{\
            UpdateConnectionStatus("Error al inicializar BLE: " + error);\
        \});\
\
        // Verificar si el PokeInteractable est\'e1 asignado y a\'f1adir el evento\
        if (pokeInteractable != null)\
        \{\
            pokeInteractable.WhenPointerEventRaised += OnPokeInteraction;\
        \}\
        else\
        \{\
            UpdateConnectionStatus("Error: PokeInteractable no configurado.");\
        \}\
    \}\
\
    private void OnDestroy()\
    \{\
        // Eliminar el evento de PokeInteractable al destruir el objeto\
        if (pokeInteractable != null)\
        \{\
            pokeInteractable.WhenPointerEventRaised -= OnPokeInteraction;\
        \}\
    \}\
\
    // M\'e9todo que maneja la interacci\'f3n con el PokeInteractable\
    private void OnPokeInteraction(PointerEvent evt)\
    \{\
        if (evt.Type == PointerEventType.Select && !isConnected && !scanning)\
        \{\
            UpdateConnectionStatus("Iniciando escaneo por BLE...");\
            scanning = true;\
            ScanForDevice();\
        \}\
    \}\
\
    void ScanForDevice()\
    \{\
        scanning = true;\
        UpdateConnectionStatus("Escaneando dispositivos BLE...");\
\
        BluetoothLEHardwareInterface.ScanForPeripheralsWithServices(null, (address, name) =>\
        \{\
            UpdateConnectionStatus($"Dispositivo detectado: \{name\}");\
\
            if (name.Contains(DeviceName))\
            \{\
                UpdateConnectionStatus("Dispositivo encontrado: " + name);\
                BluetoothLEHardwareInterface.StopScan();\
                _deviceAddress = address;\
                ConnectToDevice();\
            \}\
        \});\
    \}\
\
    void ConnectToDevice()\
    \{\
        BluetoothLEHardwareInterface.ConnectToPeripheral(_deviceAddress, null, null, (address, serviceUUID, characteristicUUID) =>\
        \{\
            if (serviceUUID.Trim().ToLower() == ServiceUUID.ToLower() && characteristicUUID.Trim().ToLower() == IMUUUID.ToLower())\
            \{\
                isConnected = true;\
                UpdateConnectionStatus("Conectado al dispositivo ESP32");\
\
                BluetoothLEHardwareInterface.SubscribeCharacteristicWithDeviceAddress(\
                    _deviceAddress,\
                    ServiceUUID,\
                    IMUUUID,\
                    null,\
                    OnIMUDataReceived\
                );\
            \}\
        \}, (disconnectedAddress) =>\
        \{\
            isConnected = false;\
            UpdateConnectionStatus("Dispositivo desconectado");\
        \});\
    \}\
\
    private void OnIMUDataReceived(string deviceAddress, string characteristic, byte[] data)\
    \{\
        if (data.Length >= 6)  // Ejemplo: suponiendo que la IMU env\'eda 6 bytes (3 ejes de 2 bytes cada uno)\
        \{\
            short accelX = System.BitConverter.ToInt16(data, 0);\
            short accelY = System.BitConverter.ToInt16(data, 2);\
            short accelZ = System.BitConverter.ToInt16(data, 4);\
\
            imuDataText.text = $"IMU Data: X=\{accelX\}, Y=\{accelY\}, Z=\{accelZ\}";\
            imuDataCanvasText.text = $"IMU Data: X=\{accelX\}, Y=\{accelY\}, Z=\{accelZ\}";\
            Debug.Log($"IMU Data - X:\{accelX\}, Y:\{accelY\}, Z:\{accelZ\}");\
        \}\
        else\
        \{\
            UpdateConnectionStatus("Datos de IMU recibidos con tama\'f1o inesperado.");\
        \}\
    \}\
\
    private void UpdateConnectionStatus(string message)\
    \{\
        connectionStatus.text = message;\
    \}\
\
    // Funci\'f3n para solicitar permisos necesarios en Android\
    private void RequestPermissions()\
    \{\
        // Verificar si el permiso de ubicaci\'f3n ha sido concedido (necesario para BLE)\
        if (!Permission.HasUserAuthorizedPermission(Permission.FineLocation))\
        \{\
            // Solicitar el permiso de ubicaci\'f3n (BLE requiere ubicaci\'f3n)\
            Permission.RequestUserPermission(Permission.FineLocation);\
        \}\
\
        // Si estamos en Android 12 o superior (API 31 o superior)\
        if (SystemInfo.operatingSystem.Contains("Android 12"))\
        \{\
            // Verificar y solicitar permiso para escanear Bluetooth\
            if (!Permission.HasUserAuthorizedPermission("android.permission.BLUETOOTH_SCAN"))\
            \{\
                Permission.RequestUserPermission("android.permission.BLUETOOTH_SCAN");\
            \}\
\
            // Verificar y solicitar permiso para conectar dispositivos Bluetooth\
            if (!Permission.HasUserAuthorizedPermission("android.permission.BLUETOOTH_CONNECT"))\
            \{\
                Permission.RequestUserPermission("android.permission.BLUETOOTH_CONNECT");\
            \}\
\
            // Verificar y solicitar permiso para anunciar dispositivos Bluetooth\
            if (!Permission.HasUserAuthorizedPermission("android.permission.BLUETOOTH_ADVERTISE"))\
            \{\
                Permission.RequestUserPermission("android.permission.BLUETOOTH_ADVERTISE");\
            \}\
        \}\
    \}\
\}\
}